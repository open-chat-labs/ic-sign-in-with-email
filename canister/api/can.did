type Delegation = record { pubkey : blob; expiration : nat64 };
type EncryptedAwsEmailSenderConfig = record {
  region : text;
  secret_key_encrypted : text;
  target_arn : text;
  access_key_encrypted : text;
};
type EncryptedEmailSenderConfig = variant {
  Aws : EncryptedAwsEmailSenderConfig;
};
type GenerateVerificationCodeArgs = record { email : text };
type GenerateVerificationCodeResponse = variant {
  Blocked : nat64;
  EmailInvalid;
  FailedToSendEmail : text;
  Success;
};
type GetDelegationArgs = record {
  session_key : blob;
  email : text;
  expiration : nat64;
};
type GetDelegationResponse = variant { NotFound; Success : SignedDelegation };
type InitOrUpgradeArgs = record {
  test_mode : opt bool;
  email_sender_config : opt EncryptedEmailSenderConfig;
};
type SignedDelegation = record { signature : blob; delegation : Delegation };
type SubmitVerificationCodeArgs = record {
  session_key : blob;
  code : text;
  email : text;
  max_time_to_live : opt nat64;
};
type SubmitVerificationCodeResponse = variant {
  NotFound;
  Success : SubmitVerificationCodeSuccess;
  IncorrectCode;
};
type SubmitVerificationCodeSuccess = record {
  user_key : blob;
  expiration : nat64;
};
service : (InitOrUpgradeArgs) -> {
  generate_verification_code : (GenerateVerificationCodeArgs) -> (
      GenerateVerificationCodeResponse,
    );
  get_delegation : (GetDelegationArgs) -> (GetDelegationResponse) query;
  rsa_public_key : () -> (opt text) query;
  submit_verification_code : (SubmitVerificationCodeArgs) -> (
      SubmitVerificationCodeResponse,
    );
}